'use strict';

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var app = angular.module('NS-SSH', ['cfp.hotkeys']);

app.config(function ($locationProvider) {
	// Turn off # urls
	$locationProvider.html5Mode(true);
});
app.factory('clientCmdsFactory', function (themeFactory, musicFactory, shellDetails) {

	function changePrompt(args) {
		shellDetails.prompt = args.join(' ');
	}

	// Useful if the client is in a different time zone then the server
	function clientDate() {
		return new Date().toString();
	}

	// Switch back to Doogie Howser theme
	function doogie() {
		themeFactory.updateTheme(themeFactory.DOOGIE_THEME);
		musicFactory.updateAudio();
	}

	// cmd: teach   args: ['me', 'how', 'to', 'dougie']
	function teachDougie(args) {
		if (args.join(' ') !== 'me how to dougie') return;
		themeFactory.updateTheme(themeFactory.DOUGIE_THEME);
		musicFactory.updateAudio();
	}

	return {
		changePrompt: changePrompt,
		clientDate: clientDate,
		doogie: doogie,
		teach: teachDougie
	};
});

app.factory('musicFactory', function (themeFactory) {

	var audio = document.createElement('audio');

	updateAudio();

	function play() {
		audio.play();
	}

	function pause() {
		audio.pause();
	}

	function togglePlayPause() {
		audio.paused ? audio.play() : audio.pause();
	}

	function updateAudio() {
		audio.src = themeFactory.selectedTheme().audio;
		audio.load();
		audio.loop = true;
		play();
	}

	return {
		play: play,
		pause: pause,
		togglePlayPause: togglePlayPause,
		updateAudio: updateAudio
	};
});
app.factory('cmdLogFactory', function () {

	var cmdLog = [];
	var logPointer = 0;

	function addCmdToLog(cmd) {
		cmdLog.push(cmd);
		logPointer = cmdLog.length - 1;
	}

	function scrollLogUpKey() {
		var selectedPtr = logPointer;

		logPointer = selectedPtr - 1 === -1 ? 0 : selectedPtr - 1;
		return cmdLog[selectedPtr];
	}

	function scrollLogDownKey() {
		var selectedPtr = logPointer;
		logPointer = selectedPtr + 1 === cmdLog.length ? cmdLog.length - 1 : selectedPtr + 1;
		return cmdLog[selectedPtr];
	}

	return {
		addCmdToLog: addCmdToLog,
		scrollLogUpKey: scrollLogUpKey,
		scrollLogDownKey: scrollLogDownKey
	};
});
app.factory('shellDetails', function () {

	var prompt = 'prompt >';

	return {
		prompt: prompt
	};
});
app.factory('shellFactory', function ($http, $log, shellDetails, cmdLogFactory, clientCmdsFactory) {

	var cmdRoute = 'api/shell-cmd/';
	var results = [];

	function buildApiReqStr(user_cmd, args) {
		// args will be undefined if none are provided
		var argsRequest = args.length ? '/' + JSON.stringify(args) : '';

		return '' + cmdRoute + user_cmd + argsRequest;
	}

	function parseCmd(cmd) {
		var _cmd$split = cmd.split(' '),
		    _cmd$split2 = _toArray(_cmd$split),
		    user_cmd = _cmd$split2[0],
		    args = _cmd$split2.slice(1);

		return {
			user_cmd: user_cmd,
			args: args
		};
	}

	function submitCmd(cmd) {
		// If user just pressed enter or provided an empty string
		if (!cmd) {
			results.push(shellDetails.prompt);
			return;
		}
		var cmdObj = parseCmd(cmd);

		cmdLogFactory.addCmdToLog(cmd);
		console.log(clientCmdsFactory);
		// Check if it's a client side command√ü
		if (clientCmdsFactory[cmdObj.user_cmd]) {
			results.push(shellDetails.prompt + cmd);
			results.push(clientCmdsFactory[cmdObj.user_cmd](cmdObj.args));
		} else {
			$http.get(buildApiReqStr(cmdObj.user_cmd, cmdObj.args)).then(function (res) {
				results.push(shellDetails.prompt + cmd);
				results.push(res.data);
				window.scrollTo(0, document.body.scrollHeight); // Keep prompt at bottom of window
			}).catch($log);
		}
	}

	function fetchResults() {
		return results.slice();
	}

	function clearResults() {
		results = [];
	}

	function updatePrompt(newPrompt) {
		prompt = newPrompt;
	}

	return {
		submitCmd: submitCmd,
		fetchResults: fetchResults,
		clearResults: clearResults,
		updatePrompt: updatePrompt
	};
});
app.factory('themeFactory', function () {

	var DOOGIE_THEME = 'DOOGIE';
	var DOUGIE_THEME = 'DOUGIE';
	var currentTheme = DOOGIE_THEME;

	var themes = {
		DOOGIE: {
			audio: 'audio/DoogieHowserTheme.mp3',
			bannerText: 'PERSONAL TERMINAL OF DOOGIE HOWSER, M.D.'
		},
		DOUGIE: {
			audio: 'audio/TeachMeHowToDougie.mp3',
			bannerText: 'PERSONAL TERMINAL OF DO<s>O</s><ins>U</ins>GIE <s>HOWSER</s>, M.<s>D</s><ins>C</ins>'
		}
	};

	function selectedTheme() {
		return themes[currentTheme];
	}

	function updateTheme(theme) {
		if (~Object.keys(themes).indexOf(theme)) {
			currentTheme = theme;
		}
	}

	return {
		DOOGIE_THEME: DOOGIE_THEME,
		DOUGIE_THEME: DOUGIE_THEME,
		selectedTheme: selectedTheme,
		updateTheme: updateTheme
	};
});
app.directive('banner', function () {
	return {
		restrict: 'E',
		templateUrl: 'js/directives/banner/banner-template.html',
		controller: function controller($scope, $sce, themeFactory) {
			$scope.getThemeText = function () {
				return $sce.trustAsHtml(themeFactory.selectedTheme().bannerText);
			};
		}
	};
});
app.directive('shell', function () {
	return {
		restrict: 'E',
		templateUrl: 'js/directives/shell/shell-template.html',
		controller: function controller(musicFactory, hotkeys, shellFactory) {
			// musicFactory.play(); 

			hotkeys.add({
				combo: 'command+k',
				description: 'Clear window of previous results.',
				allowIn: ['INPUT'],
				callback: function callback() {
					shellFactory.clearResults();
				}
			});
			hotkeys.add({
				combo: 'command+p',
				description: 'Toggle music between play and pause. You\'re welcome...',
				allowIn: ['INPUT'],
				callback: function callback(event) {
					musicFactory.togglePlayPause();
					event.preventDefault();
				}
			});
		}
	};
});
app.directive('shellIntro', function () {
	return {
		restrict: 'E',
		templateUrl: 'js/directives/shell-intro/shell-intro-template.html',
		controller: function controller($scope) {
			var date = new Date();
			var dateString = date.toString();
			dateString = dateString.slice(0, dateString.indexOf(date.getFullYear()) + 4);
			$scope.date = '' + dateString;

			// document.addEventListener("DOMContentLoaded", function(){
			// 	console.log('got here')
			// 	Typed.new(".intro", {
			// 		strings: ["First sentence.", "Second sentence."],
			// 		typeSpeed: 0
			// 	});
			// });
		}
	};
});
app.directive('shellInputLine', function () {
	return {
		restrict: 'E',
		templateUrl: 'js/directives/shell-input-line/shell-input-line-template.html',
		controller: function controller($scope, hotkeys, shellDetails, shellFactory, cmdLogFactory) {
			$scope.submitCmd = function () {
				shellFactory.submitCmd($scope.shellCmd);
				$scope.shellCmd = '';
			};

			$scope.shellPrompt = function () {
				return shellDetails.prompt;
			};

			hotkeys.add({
				combo: 'up',
				description: 'Scroll up through previous commands.',
				allowIn: ['INPUT'],
				callback: function callback() {
					$scope.shellCmd = cmdLogFactory.scrollLogUpKey();
				}
			});
			hotkeys.add({
				combo: 'down',
				description: 'Scroll down through previuos commands.',
				allowIn: ['INPUT'],
				callback: function callback() {
					$scope.shellCmd = cmdLogFactory.scrollLogDownKey();
				}
			});
		}
	};
});
app.directive('shellResults', function () {
	return {
		restrict: 'E',
		templateUrl: 'js/directives/shell-results/results-template.html',
		controller: function controller($scope, shellFactory) {
			$scope.fetchResults = function () {
				return shellFactory.fetchResults();
			};
		}
	};
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
